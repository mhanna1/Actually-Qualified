<% provide(:title, 'Employer Introduction Site - Use The Right Tool for the Job') %>

<div class="jumbotron" style="background:#5C81AB !important">


  <h1>Experience takes time to Acquire</h1>

  <h3 align="center" style="color:#000000">Experience helps us to choose the "Right Tool" for each job.</h3>


  <p align=justify>The typical computer code is used to manipulate, convey and store characters, words, and numbers. It
    is mostly all the same, the differences are mostly in the syntax. You must however be aware of what precision is
    required to satisfy each language In the examples below I will attempt to show how my experience and
    versatility can be a benefit to your company. The examples below will illustrate just how simular the different
    languages
    can be.</p>

  <H1>Programming Language: C<br>Is it the Right Tool?</H1>

  <p align=justify>To use an array in C you must first declare it then you can initialize or place values in it.</p>

<pre>
/* IN C comments are contained between these sigils */

/* declare an array of type int called my_array_name which has a maximum number of 10 members */
int my_array_name[10];

/* initialize the my_array_name array with 5 values */
int my_array_name[5] = {1000, 2, 3, 7, 50};
</pre>

  <br><br><br>

  <H1>Programming Language: C++<br>Is it the Right Tool?</H1>

  <p align=justify>To use an array in C++ you also must first declare it then
    you can initialize or place values in it. The C programming language was written by
    AT&T in the 1970's, whereas C with Classes was renamed C++ in 1983. It was both
    very different but very familiar as well.</p>

<pre>
/* IN C++ comments are contained between these sigils */

/* declare an array of type double called my_name_array which has a maximum number of 10 members */
int my_array_name[10];

/* initialize the my_array_name  array with 5 values */
int my_array_name[5] = {1000, 2, 3, 7, 50};
</pre>

  <br><br><br>

  <H1>Programming Language: Java<br>Is it the Right Tool?</H1>

  <p align=justify>To use an array in Java ... an array as with everything in Java must be included within a Class. You
    also must first
    declare it then you can initialize or place values in it. </p>

<pre>
// comments in Java are behind the // sigil

// Java is all about the Classes

class Testarray1{
  public static void main(String args[]){

  //declaration, instantiation and initialization

  int myArrayName[]={1000, 2, 3, 7, 50};

  //if I wanted to print out the array

  //length is the property of array  myArrayName.length

  for (int i=0; i < int myArrayName.length ;i++)
    System.out.println(int myArrayName[i]);
  }
}
</pre>


  <br><br><br>

  <H1>Programming Language: PERL<br>Is it the Right Tool?</H1>

  <p align=justify>PERL is an example of loosely typed language.
    To use an array in PERL you DO NOT need to pre-declare it. ...
    You may declare and initialize it with values in one statement.</p>

<pre>
# Comments in PERL follow the # character

@my_array_name = (1000, 2, 3, 7, 50);

# the line below creates the same array
@my_array_name = qw/1000 2 3 7 50/;

@my_array_name = qw/This is an array/;

@my_array_name = ("This", "is", "an", "array");
</pre>


  <br><br><br>

  <H1>Programming Language: Ruby<br>Is it the Right Tool?</H1>

  <p align=justify>The syntax of Ruby is broadly similar to that of Perl and Python.
    Class and method definitions are signaled by keywords. In contrast to Perl,
    variables are not obligatorily prefixed with a sigil. When used,
    the sigil changes the semantics of scope of the variable.
    RUBY is another example of loosely typed language, however in
    RUBY everything is an object. RUBY is flexible in
    RUBY can use an array literal. In programming, a "literal" is a type of variable that's
    built into the language itself and has special syntax to create it.
    For example, 3 is a numeric literal and "Ruby" is a string literal.
    An array literal is a list of variables enclosed in square brackets
    and separated by commas, like [ 1, 2, 3 ]. Note that any type of
    variables can be stored in an array,
    including variables of different types in the same array.

<pre>
# Comments in RUBY also follow the # character

my_array_name = [1000, 2, 3, 7, 50];

# To use an array in RUBY you DO NOT need to declare it, but you can if you want to
# You can declare or create an empty array my_array_name = Array.new

my_array_name = Array.new

# this line below would place 200 in the 2nd position of the array called  my_array_name
# arrays positions are 0 based i.e.  [0], [1], [2], [3], [4]

my_array_name[1] = 200

#  my_array_name would then = [1000, 200, 3, 7, 50]

</pre>


  <br><br><br>

  <H1>Programming Language: PHP<br>Is it the Right Tool?</H1>

  <p align=justify>PHP is powerful enough to be at the core of the biggest blogging system on the web (WordPress)!
    It is deep enough to run the largest social network (Facebook)!
    PHP is a widely-used server side open source scripting language. Note that any type of
    variables can be stored in an array, including variables of different types in the same array.

<pre>
// This is a single-line comment

# This is also a single-line comment

/*
This is a multiple-lines comment block
that spans over multiple
lines
*/

// You can also use comments to leave out parts of a code line
// below $x would end up being assigned the value of 10     5 + 5
$x = 5 /* + 15 */ + 5;

  <?php
$my_array_name = array(1000, 2, 3, 7, 50);
// the line below assigns $arrlength a value of 5 the number of items in the array
$arrlength = count($my_array_name);

// to print the items contained in the array
for($x = 0; $x < $arrlength; $x++) {
    echo $my_array_name[$x];
    echo "<br>";
}
?>
</pre>

  <br><br><br>

  <H1>Programming Language: Python<br>Is it the Right Tool?</H1>

  <p align=justify>In Python there is a builtin "Array" module which defines an object type which can compactly
    represent an array of
    basic values: characters, integers, floating point numbers. Arrays are sequence
    types and behave very much like lists, except that the type of objects stored in
    them is constrained. The type is specified at object creation time by using a
    <em class="dfn">type code</em>, which is a single character. The following type codes are
    defined:</p>
  <table align=center border="1" class="docutils">
    <colgroup>
      <col width="16%"/>
      <col width="23%"/>
      <col width="28%"/>
      <col width="33%"/>
    </colgroup>
    <thead valign="bottom">
    <tr class="row-odd">
      <th class="head">Type code</th>
      <th class="head">C Type</th>
      <th class="head">Python Type</th>
      <th class="head">Minimum size in bytes</th>
    </tr>
    </thead>
    <tbody valign="top">
    <tr class="row-even">
      <td><tt class="docutils literal"><span class="pre">'c'</span></tt></td>
      <td>char</td>
      <td>character</td>
      <td>1</td>
    </tr>
    <tr class="row-odd">
      <td><tt class="docutils literal"><span class="pre">'b'</span></tt></td>
      <td>signed char</td>
      <td>int</td>
      <td>1</td>
    </tr>
    <tr class="row-even">
      <td><tt class="docutils literal"><span class="pre">'B'</span></tt></td>
      <td>unsigned char</td>
      <td>int</td>
      <td>1</td>
    </tr>
    <tr class="row-odd">
      <td><tt class="docutils literal"><span class="pre">'u'</span></tt></td>
      <td>Py_UNICODE</td>
      <td>Unicode character</td>
      <td>2 (see note)</td>
    </tr>
    <tr class="row-even">
      <td><tt class="docutils literal"><span class="pre">'h'</span></tt></td>
      <td>signed short</td>
      <td>int</td>
      <td>2</td>
    </tr>
    <tr class="row-odd">
      <td><tt class="docutils literal"><span class="pre">'H'</span></tt></td>
      <td>unsigned short</td>
      <td>int</td>
      <td>2</td>
    </tr>
    <tr class="row-even">
      <td><tt class="docutils literal"><span class="pre">'i'</span></tt></td>
      <td>signed int</td>
      <td>int</td>
      <td>2</td>
    </tr>
    <tr class="row-odd">
      <td><tt class="docutils literal"><span class="pre">'I'</span></tt></td>
      <td>unsigned int</td>
      <td>long</td>
      <td>2</td>
    </tr>
    <tr class="row-even">
      <td><tt class="docutils literal"><span class="pre">'l'</span></tt></td>
      <td>signed long</td>
      <td>int</td>
      <td>4</td>
    </tr>
    <tr class="row-odd">
      <td><tt class="docutils literal"><span class="pre">'L'</span></tt></td>
      <td>unsigned long</td>
      <td>long</td>
      <td>4</td>
    </tr>
    <tr class="row-even">
      <td><tt class="docutils literal"><span class="pre">'f'</span></tt></td>
      <td>float</td>
      <td>float</td>
      <td>4</td>
    </tr>
    <tr class="row-odd">
      <td><tt class="docutils literal"><span class="pre">'d'</span></tt></td>
      <td>double</td>
      <td>float</td>
      <td>8</td>
    </tr>
    </tbody>
  </table>

  <br><br>

<pre>

# comments follow the # sigil in Python

# the line below both defines and populates an array of integers in my_array_name
my_name_array = array('I', [1000, 2, 3, 7, 50])

# To print the items in my_array_name you can use a for loop
for i in range(len(my_name_array)):
  print i, my_name_array[i]

</pre>

  <br><br><br>

  <H1>Using the Right Tool...</H1>

  <p align=justify>As you can see being able to read and write computer code varies a little from language to
    language
    but it is not rocket science. Knowing how each language handles things differently is a benefit.
    Even a back yard car mechanic knows you need the right tool for the right job. However if all
    a programmer knows are tools contained in a single toolbox then how will he know the best
    tool to use.
  </p>


  <p align=justify>Languages may look simular but will they all perform the same? No.</p>

  <br><br><br>

  <h1><%= link_to 'Programming Language Differences Click Here', languages_path, id: 'pagelink1' %></h1>

  <br><br><br><br><br><br><br><br>


</div>